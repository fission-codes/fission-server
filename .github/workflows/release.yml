name: 𝌚 Release

on:
  workflow_dispatch:
    inputs:
      force-publish:
        required: true
        type: boolean
        description: Publish Releases at Anytime

  workflow_run:
    workflows: [ 🧪 Tests and Checks ]
    branches: [main]
    types: [ completed ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release-please:
    runs-on: ubuntu-latest
    if: >
      github.ref == 'refs/heads/main' &&
      github.repository_owner == 'icidasset' &&
      github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success'

    outputs:
      release_created: ${{ steps.release.outputs.release_created }}

    steps:
      - name: Run release-please
        id: release
        uses: google-github-actions/release-please-action@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          default-branch: main
          command: manifest
          extra-files: |
            README.md

  publish-release:
    runs-on: ubuntu-latest
    needs: [ release-please ]

    permissions:
      contents: write

    if: ${{ needs.release-please.outputs.release_created || github.event.inputs.force-publish }}

    steps:
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Cache Project
        uses: Swatinem/rust-cache@v2

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          override: true
          profile: minimal
          toolchain: stable

      - name: Verify Publishing of crate
        uses: katyo/publish-crates@v2
        with:
          dry-run: true

      - name: Cargo Publish to crates.io
        uses: katyo/publish-crates@v2
        with:
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  publish-docker-build:
    runs-on: ubuntu-latest
    needs: [ release-please, publish-release ]

    env:
      DOCKER_BUILDKIT: 1

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Get Version Number
        shell: bash
        run: echo "PROJECT_VERSION=$(sed -n 's/^version = "\(.*\)"/\1/p' Cargo.toml | head -n1)" >> $GITHUB_ENV

      # https://github.com/docker/setup-qemu-action
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2

      # https://github.com/docker/setup-buildx-action
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: "--debug"

      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Build and Push
        uses: docker/build-push-action@v4
        with:
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/fission-server:latest
          cache-to: type=registry,ref=ghcr.io/${{ github.repository_owner }}/fission-server:latest,mode=max
          context: .
          platforms: linux/amd64, linux/arm64
          push: true
          tags: |
            ${{ github.repository_owner }}/fission-server:${{ env.PROJECT_VERSION }}
            ${{ github.repository_owner }}/fission-server:latest
            ghcr.io/${{ github.repository_owner }}/fission-server:${{ env.PROJECT_VERSION }}
            ghcr.io/${{ github.repository_owner }}/fission-server:latest
