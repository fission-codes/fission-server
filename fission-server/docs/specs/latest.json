{
  "openapi": "3.0.3",
  "info": {
    "title": "fission-server",
    "description": "",
    "contact": {
      "name": "Steven Vandevelde",
      "email": "icid.asset@gmail.com"
    },
    "license": {
      "name": "Apache-2.0"
    },
    "version": "0.1.0"
  },
  "paths": {
    "/api/account": {
      "post": {
        "tags": [
          "account"
        ],
        "summary": "POST handler for creating a new account",
        "description": "POST handler for creating a new account\nPOST handler for creating a new account",
        "operationId": "create_account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAccount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successfully created account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewAccount"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ucan_bearer": []
          }
        ]
      }
    },
    "/api/account/{username}": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "GET handler to retrieve account details",
        "description": "GET handler to retrieve account details",
        "operationId": "get_account",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewAccount"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ucan_bearer": []
          }
        ]
      }
    },
    "/api/account/{username}/did": {
      "put": {
        "tags": [
          "account"
        ],
        "summary": "Handler to update the DID associated with an account",
        "description": "Handler to update the DID associated with an account",
        "operationId": "update_did",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated DID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewAccount"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppError"
                }
              }
            }
          }
        }
      }
    },
    "/api/account/{username}/volume/cid": {
      "get": {
        "tags": [
          "volume"
        ],
        "summary": "GET handler to retrieve account volume CID",
        "description": "GET handler to retrieve account volume CID",
        "operationId": "get_cid",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found volume",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewAccount"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ucan_bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "volume"
        ],
        "summary": "Handler to update the CID associated with an account's volume",
        "description": "Handler to update the CID associated with an account's volume",
        "operationId": "update_cid",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated Volume",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewVolume"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ucan_bearer": []
          }
        ]
      }
    },
    "/api/auth/email/verify": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "POST handler for requesting a new token by email",
        "description": "POST handler for requesting a new token by email\nPOST handler for requesting a new token by email",
        "operationId": "request_token",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/email_verification.Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully sent request token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ucan_bearer": []
          }
        ]
      }
    },
    "/healthcheck": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "GET handler for checking service health.",
        "description": "GET handler for checking service health.",
        "operationId": "healthcheck",
        "responses": {
          "200": {
            "description": "fission-server healthy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthcheckResponse"
                }
              }
            }
          },
          "503": {
            "description": "fission-server not healthy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthcheckResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ping": {
      "get": {
        "tags": [
          "ping"
        ],
        "summary": "GET handler for internal pings and availability",
        "description": "GET handler for internal pings and availability",
        "operationId": "get",
        "responses": {
          "200": {
            "description": "Ping successful"
          },
          "500": {
            "description": "Ping not successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AppError": {
        "type": "object",
        "description": "Encodes [JSONAPI error object responses](https://jsonapi.org/examples/#error-objects).\n\nJSONAPI error object -  ALL Fields are technically optional.\n\nThis struct uses the following guidelines:\n\n1. Always encode the StatusCode of the response\n2. Set the title to the `canonical_reason` of the status code.\nAccording to spec, this should NOT change over time.\n3. For unrecoverable errors, encode the detail as the to_string of the error\n\nOther fields not currently captured (but can be added)\n\n- id - a unique identifier for the problem\n- links - a link object with further information about the problem\n- source - a JSON pointer indicating a problem in the request json OR\na parameter specifying a problematic query parameter\n- meta - a meta object containing arbitrary information about the error",
        "required": [
          "status"
        ],
        "properties": {
          "detail": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "example": 200,
            "minimum": 0.0
          },
          "title": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "HealthcheckResponse": {
        "type": "object",
        "description": "A healthcheck response containing diagnostic information for the service",
        "required": [
          "database_connected"
        ],
        "properties": {
          "database_connected": {
            "type": "boolean"
          },
          "database_up_to_date": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "NewAccount": {
        "type": "object",
        "description": "Account Request Struct (for creating new accounts)",
        "required": [
          "username",
          "email",
          "did"
        ],
        "properties": {
          "did": {
            "type": "string",
            "description": "DID associated with the account"
          },
          "email": {
            "type": "string",
            "description": "Email address associated with the account"
          },
          "username": {
            "type": "string",
            "description": "Username associated with the account"
          }
        }
      },
      "NewVolumeRecord": {
        "type": "object",
        "description": "New Volume Struct (for creating new volumes)",
        "required": [
          "cid"
        ],
        "properties": {
          "cid": {
            "type": "string",
            "description": "Content ID of the volume"
          }
        }
      },
      "Request": {
        "type": "object",
        "description": "[Request] Parameters",
        "required": [
          "email",
          "did"
        ],
        "properties": {
          "code_hash": {
            "type": "string",
            "description": "The hash of the code, so that it can only be used by the intended recipient.\nWe only store the hash, not the code itself.",
            "nullable": true
          },
          "did": {
            "type": "string",
            "description": "The (pre-generated) did of the client application.\nCurrently only did:key is supported."
          },
          "email": {
            "type": "string",
            "description": "The email address of the user signing up"
          }
        }
      },
      "Response": {
        "type": "object",
        "description": "Response for Request Token",
        "required": [
          "msg"
        ],
        "properties": {
          "msg": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "ucan_bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "tags": [
    {
      "name": "",
      "description": "fission-server service/middleware"
    }
  ]
}
